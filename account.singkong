#
    account.singkong
    Account

    Bakwan: simple accounting software
    written in Singkong Programming Language

    https://github.com/nopri/bakwan  
    Started by: Noprianto <nop@noprianto.com>
;

var account_type_asset = "Asset"
var account_type_liability = "Liability"
var account_type_equity = "Equity"
var account_type_income = "Income"
var account_type_expense = "Expense"

var account_types = [
    account_type_asset,
    account_type_liability,
    account_type_equity,
    account_type_income,
    account_type_expense
]
var account_types_ = join(",", account_types)

var account_mask = "###"
var account_char = "___"

var account_types_code = {
    account_type_asset: 1,
    account_type_liability: 2,
    account_type_equity: 3,
    account_type_income: 4,
    account_type_expense: 5,
}
var account_types_code_r = {
    1: account_type_asset,
    2: account_type_liability,
    3: account_type_equity,
    4: account_type_income,
    5: account_type_expense,
}

var account_template = [
    [account_type_asset, "110", "Cash"],
    [account_type_asset, "120", "Accounts Receivable"],
    [account_type_asset, "130", "Inventory"],
    [account_type_liability, "210", "Accounts Payable"],
    [account_type_equity, "310", "Owner's Equity"],
    [account_type_income, "410", "Revenue"],
    [account_type_expense, "510", "Utilities"],
    [account_type_expense, "520", "Cost of Goods Sold"]
]

var account_is_valid_type = fn(t) {
    return in(account_types, t)
}

var account_is_valid_code = fn(c) {
    var c = replace(trim(c), "_", "")
    return ((len(c) == len(account_mask)) & isdigit(c) )
}

var account_is_valid_desc = fn(d) {
    var d = trim(d)
    return !empty(d)
}

var account_is_valid = fn(a) {
    if (is(a, "ARRAY")) {
        if (len(a) == 3) {
            return account_is_valid_type(a[0]) &
                account_is_valid_code(a[1]) &
                account_is_valid_desc(a[2])
        }
    }
    return false
}

var account_details = fn(a) {
    var ret = [""]
    each(keys(a), fn(e, i) {
        ret + (upper(_(e), true) + ": " + a[e])
    })
    return join(lf(), ret)
}

